name: AuraVest CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  test-backend:
    name: Backend Tests & Quality Checks
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: auravest_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Set up environment variables
      run: |
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/auravest_test" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key-for-ci" >> $GITHUB_ENV

    - name: Run database migrations
      run: |
        python -c "from database import init_database; init_database()"

    - name: Run backend tests with coverage
      run: |
        pytest tests/test_enhanced_risk_analysis.py -v --cov=. --cov-report=xml --cov-report=html

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: backend
        name: backend-coverage

    - name: Test API health check
      run: |
        python main.py &
        sleep 10
        curl -f http://localhost:8000/health || exit 1

  test-frontend:
    name: Frontend Tests & Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run frontend linting
      working-directory: ./frontend
      run: npm run lint --if-present

    - name: Run frontend tests
      working-directory: ./frontend
      run: npm test -- --coverage --watchAll=false

    - name: Build frontend
      working-directory: ./frontend
      run: npm run build

    - name: Test frontend build
      working-directory: ./frontend
      run: |
        npm install -g serve
        serve -s build -p 3000 &
        sleep 5
        curl -f http://localhost:3000 || exit 1

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: auravest_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install backend dependencies
      run: pip install -r requirements.txt

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Set up Chrome for Selenium
      uses: browser-actions/setup-chrome@v1

    - name: Set up environment variables
      run: |
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/auravest_test" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key-for-ci" >> $GITHUB_ENV

    - name: Initialize database
      run: python -c "from database import init_database; init_database()"

    - name: Start backend server
      run: |
        python main.py &
        echo $! > backend.pid
        sleep 10

    - name: Build and start frontend
      working-directory: ./frontend
      run: |
        npm run build
        npm install -g serve
        serve -s build -p 3000 &
        echo $! > ../frontend.pid
        sleep 5

    - name: Run integration tests
      run: |
        pytest tests/test_integration_workflow.py -v -s --tb=short

    - name: Run frontend component tests
      run: |
        pytest tests/test_frontend_components.py -v --tb=short

    - name: Clean up processes
      if: always()
      run: |
        if [ -f backend.pid ]; then kill $(cat backend.pid) || true; fi
        if [ -f frontend.pid ]; then kill $(cat frontend.pid) || true; fi

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install security scanning tools
      run: |
        pip install bandit safety

    - name: Run Bandit security scan
      run: bandit -r . -f json -o bandit-report.json || true

    - name: Run Safety check for dependencies
      run: safety check --json --output safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [test-backend]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: auravest_test
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install locust

    - name: Set up environment
      run: |
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/auravest_test" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key-for-ci" >> $GITHUB_ENV

    - name: Initialize database
      run: python -c "from database import init_database; init_database()"

    - name: Start server
      run: |
        python main.py &
        sleep 10

    - name: Run performance tests
      run: |
        timeout 60 locust -f tests/locustfile.py --host=http://localhost:8000 --users=10 --spawn-rate=2 --run-time=30s --headless || true

  docker-build:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: auravest:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        docker run --rm -d -p 8000:8000 --name auravest-test auravest:test
        sleep 15
        curl -f http://localhost:8000/health || exit 1
        docker stop auravest-test

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [integration-tests, security-scan, performance-tests, docker-build]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "üöÄ Deploying to staging environment..."
        # Add actual deployment commands here
        echo "Staging deployment completed"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [integration-tests, security-scan, performance-tests, docker-build]
    if: github.ref == 'refs/heads/main'
    
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "üöÄ Deploying to production environment..."
        # Add actual deployment commands here
        echo "Production deployment completed"

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    if: always()
    needs: [test-backend, test-frontend, integration-tests, security-scan, performance-tests]
    
    steps:
    - name: Notify success
      if: needs.test-backend.result == 'success' && needs.test-frontend.result == 'success' && needs.integration-tests.result == 'success'
      run: |
        echo "‚úÖ All tests passed! AuraVest enhanced features are working correctly."
        
    - name: Notify failure
      if: needs.test-backend.result == 'failure' || needs.test-frontend.result == 'failure' || needs.integration-tests.result == 'failure'
      run: |
        echo "‚ùå Some tests failed. Please check the logs and fix issues before merging."
        exit 1